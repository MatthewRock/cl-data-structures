@begin(section)
@title(Overview)

cl-data-structures is a portable collection of data structures for common lisp. Design goals of this library are following:

@begin(list)
@item(Uniform -- data structures that are used for specific task should have common interface. User should just know how to use dictionary, and not specific implementation of it.)
@item(Complete -- this package intends to be definitive common lisp data structures collection, containing both functional and mutable structures, for every use case possible.)
@item(Universal -- there should be no limitations on when this library is useful.)
@end(list)

To achieve this goals, package cl-data-structures contains common api and various implementations of this api in separate packages. Implementations are divided into few categories:

@begin(list)
@item(Dicts -- short for dictionaries. Data structures that map locations to values. All in the package cl-ds.dicts)
@end(list)

@begin(section)
@title(Conventions)
Data structure types are not hidden under generic interface name (like std::unordered_map) but instead names are directly exposed to the user. User is encouraged to read Implementation details section of this manual fo figure out which data structure implementation works best for his use case. Destructive functions follow scheme style of adding '!' as a suffix (so we have GF ADD! that is destructive version of ADD).

Methods that implements API generic functions redirect logic to good, old fashioned functions named in convention data-structure-name-operation (for instance hamt-dictionary-at). If you @b(really) want to squeeze all the performance you can get, you may want to skip generic function dispatch by using those functions directly.

@end(section)

@begin(section)
@title(Key concepts)
Cl-data-structures makes use of few key concepts. It is important to understand those concepts as they will allow you to write better, safer and more efficient code. First of: there are different approaches to handling mutatating operations.

You can just allow arbitrary changes happening on any level. This usual gives you the best raw performance, but at the high cost: state that you are mutating can be shared in arbitrary way. If execution of your code is interupted, changes made in the container are preserved, even if the represent incoherent or invalid data. You need to clean it yourself. Changes are also shared between threads, which means that you will need to also share some mutex to protect your data from races. This kind of containers are called @b(mutable) in this library.


@b(Functional) containers do not suffer from the same problems. Every operation that would change existing state in the mutable container instead will return new container, with changes visible only there. This, however has another limitation: copying is costly. Although copying whole structure is usually not required, we still need to copy at least parts of it.


@b(Transactional) containers represent compromise between those two opposite approaches. Transactional containers implement @b(mutable) api in distinct way: instead of performing destructive operations in arbitrary way, we are trying to @b(isolate) changes so they will be visible only in the instance that we passed into method. This allows us to achieve compromise between safety, simplicity and speed.


Containers can be converted between functional, transactional and mutable container using @b(become) methods. However, not every container is avaible in all three variants. It is also important to remember that @b(become) methods have limited guaranteens. For instance: @b(BECOME-TRANSACTIONAL) guaranteens that changes from returned instance won't leak outside of returned instance, but not that destructive changes from original instance can't leak into it. Same applies for @b(BECOME-FUNCTIONAL) method. Be careful and keep this in mind.

@end(section)

@end(section)

@begin(section)
@title(API reference)

@begin(section)
@title(API classes)
These are classes that act as traits, providing user with information on how instance of this class is expected to behave.

@cl:with-package[name="cl-data-structures"](
@cl:doc(class fundamental-container)
@cl:doc(class functional)
@cl:doc(class mutable)
@cl:doc(class transactional)
)

In addition to the classes above cl-data-structures also implements more specific classes, describing higher level class usage. In package cl-ds.dicts:
@cl:with-package[name="cl-data-structures.dicts"](
@cl:doc(class dictionary)
)

@end(section)

@begin(section)
@title(Common API generic functions)
@cl:with-package[name="cl-data-structures"](
@cl:doc(generic at)
@cl:doc(generic size)
@cl:doc(generic emptyp)
@cl:doc(generic become-functional)
@cl:doc(generic become-mutable)
@cl:doc(generic become-transactional)
@cl:doc(generic functionalp)
@cl:doc(generic mutablep)
@cl:doc(generic transactionalp)
)
@end(section)

@begin(section)
@title(Functional API generic functions)
@cl:with-package[name="cl-data-structures"](
@cl:doc(generic add)
@cl:doc(generic insert)
@cl:doc(generic erase)
@cl:doc(generic update)
)
@end(section)

@begin(section)
@title(Mutable API generic functions)
@cl:with-package[name="cl-data-structures"](
@cl:doc(generic add!)
@cl:doc(generic erase!)
@cl:doc(generic update!)
)
@end(section)

@end(section)

@begin(section)
@title(Implementation details)

@begin(section)
@title(HAMT)

HAMT stands from hash array mapped trie. It is essentially hash tree, allowing to implement simple and efficient functional hash table. Described in great detail in the article http://lampwww.epfl.ch/papers/idealhashtrees.pdf and already used in few functional languages (for instance: clojure). cl-data-structures also offers mutable variant of hamt, because it offers faster insert and erase which can be beneficial if you already identified part of your code that bottle necks application and you are sure that your side effects won't leak outside. Both functional and mutable dictionary hamt containers implements become-transactional GF, which offers good compromise between functional and mutable approaches.


@begin(section)
@title(Structure specific behaviors)

BECOME-MUTABLE and BECOME-FUNCTIONAL functions will have destructive inpact on transactional-hamt-dictionary. Flags marking changed nodes will be cleared. This means that transactional instance preserves it's properties, but performance may suffer, as operations that normally would not require copying in transactional container will require it.


@b(Note:) This implementation uses only 60 least significant bits of hash at most.

@end(section)

@begin(section)
@title(API implementation:)
@cl:with-package[name="cl-data-structures.dicts.hamt"](
@cl:doc(function functional-hamt-dictionary-update)
@cl:doc(function functional-hamt-dictionary-add)
@cl:doc(function functional-hamt-dictionary-insert)
@cl:doc(function functional-hamt-dictionary-erase)
@cl:doc(function hamt-dictionary-at)
@cl:doc(function hamt-dictionary-size)
@cl:doc(function mutable-hamt-dictionary-update!)
@cl:doc(function mutable-hamt-dictionary-insert!)
@cl:doc(function mutable-hamt-dictionary-add!)
@cl:doc(function mutable-hamt-dictionary-erase!)
@cl:doc(function transactional-hamt-dictionary-update!)
@cl:doc(function transactional-hamt-dictionary-add!)
@cl:doc(function transactional-hamt-dictionary-insert!)
@cl:doc(function transactional-hamt-dictionary-erase!)
@cl:doc(function make-mutable-hamt-dictionary)
@cl:doc(function make-functional-hamt-dictionary)
)

@end(section)

@begin(section)
@title(Trie)
I don't know, ask Malice :D
@end(section)


@end(section)

@begin(section)
@title(Utility)
@begin(section)
@title(Utility functions)
Although implementing those is not in the scope of the project, it was sometimes required. Usually used by internals of implementations. In the package cl-ds.utils:

@cl:with-package[name="cl-data-structures.utils"](
@cl:doc(function insert-or-replace)
@cl:doc(function try-remove)
@cl:doc(function try-find-cell)
@cl:doc(function try-find)
@cl:doc(function swapop)
@cl:doc(function pop-last)
@cl:doc(function erase-from-vector)
@cl:doc(function merge-ordered-vectors)
@cl:doc(function ordered-p)
)

@end(section)

@begin(section)
@title(Utility macros)
Macros used for implementation of data structures.
@cl:with-package[name="cl-data-structures.utils"](
@cl:doc(macro with-vectors)
@cl:doc(macro bind-lambda)
@cl:doc(macro lazy-let)
@cl:doc(macro cond+)
)

@end(section)
@end(section)
@end(section)
